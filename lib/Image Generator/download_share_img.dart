import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

ScreenshotController screenshotController = ScreenshotController();
downloadImg(context) async {
  var result = await Permission.storage.request();
  if (result.isGranted) {
    const foldername = "AI Image";
    final filename = "${DateTime.now().millisecondsSinceEpoch}.png";

    final path = Directory("storage/emulated/0/$foldername");
    if (await path.exists()) {
      await screenshotController.captureAndSave(path.path,
          delay: const Duration(milliseconds: 100),
          fileName: filename,
          pixelRatio: 1.0);
      // ignore: use_build_context_synchronously
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Downloaded to ${path.path}")));
    } else {
      await path.create();
      await screenshotController.captureAndSave(path.path,
          delay: const Duration(milliseconds: 100),
          fileName: filename,
          pixelRatio: 1.0);

      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("Downloaded to ${path.path}")));
    }
  } else {
    ScaffoldMessenger.of(context)
        .showSnackBar(const SnackBar(content: Text("Permission Denied!")));
  }
}

shareImage(context) async {
  await screenshotController
      .capture(
    delay: const Duration(milliseconds: 100),
    pixelRatio: 1.0,
  )
      .then((Uint8List? img) async {
    if (img != null) {
      final directory = (await getApplicationDocumentsDirectory()).path;
      const filename = "share.png";
      final imgPath = await File("$directory/$filename").create();
      await imgPath.writeAsBytes(img);

      Share.shareXFiles(
        [XFile(imgPath.path)],
        text: "Generated By AI--NaeemDevs",
        sharePositionOrigin: () {
          RenderBox? box = context.findRenderObject() as RenderBox?;
          return box!.localToGlobal(Offset.zero) & box.size;
        }(),
      );
    } else {
      // ignore: avoid_print
      print("Failed to take Screenshot");
    }
  });
}
